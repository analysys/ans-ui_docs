(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{114:function(t,e,a){"use strict";a.r(e);var n=a(115),l=a.n(n);for(var r in n)"default"!==r&&function(t){a.d(e,t,function(){return n[t]})}(r);e.default=l.a},115:function(t,e,a){"use strict";e.__esModule=!0,e.default={data:function(){return{rowCount:5,tableHeaders:[{label:"用户ID",prop:"name"},{label:"城市",prop:"city"},{label:"最近一次使用",prop:"lastUsedTime"}],sortableHeaders:[{label:"用户ID",prop:"name"},{label:"城市",prop:"city"},{label:"最近一次使用",prop:"lastUsedTime"},{label:"使用次数",prop:"usedCount",sortable:!0,sortMethod:this.sortMethod}],multipleHeaders:[{label:"用户ID",prop:"name"},{label:"最近一次使用",prop:"lastUsedTime"},{label:"地址",children:[{label:"省份",prop:"province"},{label:"城市",prop:"city"},{label:"详细地址",prop:"address"}]}],detailTableHeaders:[{label:"用户ID",prop:"name"},{label:"城市",prop:"city"},{label:"最近一次使用",prop:"lastUsedTime"},{label:"年龄",prop:"age"},{label:"性别",prop:"gender"},{label:"职业",prop:"occupation"},{label:"电话",prop:"cellphone"}],tableBasic:"<template>\n  <x-table :data=\"tableData\">\n    <x-table-column\n      v-for=\"(header, index) in tableHeaders\"\n      :key=\"index\"\n      :label=\"header.label\"\n      :prop=\"header.prop\">\n    </x-table-column>\n  </x-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      rowCount: 5,\n      tableHeaders: [\n        { label: '用户ID', prop: 'name' },\n        { label: '城市', prop: 'city' },\n        { label: '最近一次使用', prop: 'lastUsedTime' }\n      ]\n    }\n  },\n  computed: {\n    tableData () {\n      const list = []\n      for (let i = 0; i < this.rowCount; i++) {\n        list.push({\n          name: '易小宝',\n          city: '长沙',\n          lastUsedTime: '2018-09-01 12:30:33'\n        })\n      }\n      return list\n    }\n  }\n}\n<\/script>",tableStripe:'<x-table stripe :data="tableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableBorder:'<x-table border :data="tableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableHeight:'<x-table border height="250" :data="tableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableFixed:'<x-table stripe :data="tableData">\n  <x-table-column\n    v-for="(header, index) in detailTableHeaders"\n    :fixed="index === 3 ? \'right\' : index === 1 ? \'left\' : false"\n    :key="index"\n    :width="180"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableMultiple:"<template>\n  <x-table :data=\"tableData\">\n    <template v-for=\"(header, i) in multipleHeaders\">\n      <x-table-column\n        v-if=\"header.children\"\n        :key=\"i\"\n        :label=\"header.label\">\n        <x-table-column\n          v-for=\"(sub, j) in header.children\"\n          :key=\"j\"\n          :label=\"sub.label\"\n          :prop=\"sub.prop\">\n        </x-table-column>\n      </x-table-column>\n      <x-table-column\n        v-else\n        :key=\"i\"\n        :label=\"header.label\"\n        :prop=\"header.prop\">\n      </x-table-column>\n    </template>\n  </x-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      rowCount: 5,\n      multipleHeaders: [\n        { label: '用户ID', prop: 'name' },\n        { label: '最近一次使用', prop: 'lastUsedTime' },\n        {\n          label: '地址',\n          children: [\n            { label: '省份', prop: 'province' },\n            { label: '城市', prop: 'city' },\n            { label: '详细地址', prop: 'address' }\n          ]\n        }\n      ]\n    }\n  },\n  computed: {\n    tableData () {\n      const list = []\n      for (let i = 0; i < this.rowCount; i++) {\n        list.push({\n          name: '易小宝',\n          city: '长沙',\n          lastUsedTime: '2018-09-01 12:30:33',\n          province: '湖南',\n          address: '岳麓区岳麓山下'\n        })\n      }\n      return list\n    }\n  }\n}\n<\/script>",tableSelection:'<x-table :data="tableData">\n  <x-table-column type="selection"></x-table-column>\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableSort:"<template>\n  <x-table :data=\"tableData\">\n    <x-table-column\n      v-for=\"(header, index) in sortableHeaders\"\n      :sortable=\"header.sortable\"\n      :sort-method=\"header.sortMethod\"\n      :key=\"index\"\n      :label=\"header.label\"\n      :prop=\"header.prop\">\n    </x-table-column>\n  </x-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      rowCount: 5,\n      sortableHeaders: [\n        { label: '用户ID', prop: 'name' },\n        { label: '城市', prop: 'city' },\n        { label: '最近一次使用', prop: 'lastUsedTime' },\n        { label: '使用次数', prop: 'usedCount', sortable: true, sortMethod: this.sortMethod }\n      ]\n    }\n  },\n  computed: {\n    tableData () {\n      const list = []\n      for (let i = 0; i < this.rowCount; i++) {\n        list.push({\n          name: '易小宝',\n          city: '长沙',\n          lastUsedTime: '2018-09-01 12:30:33',\n          usedCount: Math.floor(Math.random() * 10)\n        })\n      }\n      return list\n    }\n  },\n  methods: {\n    sortMethod (a, b) {\n      return a.usedCount - b.usedCount\n    }\n  }\n}\n<\/script>",tableCustom:'<x-table :data="tableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n    <template slot="header" slot-scope="scope">\n      <div\n        style="height: 40px;line-height: 40px;background: #ddd;"\n        >{{scope.column.label}}-{{scope.$index}}</div>\n    </template>\n    <template slot="content" slot-scope="scope">\n      <div\n        style="line-height: 30px;text-align: center;background: #eee;"\n        >{{scope.content}}-{{scope.$rowIndex}}</div>\n    </template>\n  </x-table-column>\n</x-table>',tableSlot:'<x-table :data="tableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    sortable\n    :label="header.label"\n    :header-align="index === 2 ? \'right\' : \'left\'"\n    :align="index === 2 ? \'right\' : \'left\'"\n    :prop="header.prop">\n    <template slot="prepend" slot-scope="scope">\n      <div :style="{margin:index === 2 ? \'0 0 0 10px\' : \'0 10px 0 0\'}">前置{{scope.$index}}</div>\n    </template>\n    <template slot="append" slot-scope="scope">\n      <div>后置{{scope.$index}}</div>\n    </template>\n    <template slot="headerText" slot-scope="scope">\n      <div>文本插槽</div>\n      <div>{{scope.column.label}}</div>\n    </template>\n  </x-table-column>\n</x-table>',tableExpand:'<x-table :data="tableData">\n  <x-table-column type="expand">\n    <template slot="expand" slot-scope="scope">\n      <div\n        style="height: 100px;line-height:100px;text-align:center;color:#cdcdcd;"\n        >这里是第{{scope.$index}}行的展开行内容</div>\n    </template>\n  </x-table-column>\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>',tableTree:"<template>\n  <x-table :data=\"treeData\">\n    <x-table-column\n      v-for=\"(header, index) in tableHeaders\"\n      :key=\"index\"\n      :label=\"header.label\"\n      :prop=\"header.prop\">\n    </x-table-column>\n  </x-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      rowCount: 5,\n      tableHeaders: [\n        { label: '用户ID', prop: 'name' },\n        { label: '城市', prop: 'city' },\n        { label: '最近一次使用', prop: 'lastUsedTime' }\n      ]\n    }\n  },\n  computed: {\n    treeData () {\n      const tree = this.getListData()\n      tree[2].children = this.getListData()\n      tree[2].children[2].children = this.getListData()\n      return tree\n    }\n  },\n  methods: {\n    getListData () {\n      const list = []\n      for (let i = 0; i < this.rowCount; i++) {\n        list.push({\n          name: '易小宝',\n          city: '长沙',\n          lastUsedTime: '2018-09-01 12:30:33'\n        })\n      }\n      return list\n    }\n  }\n<\/script>",tableSpan:"<template>\n  <x-table :data=\"tableData\" :cell-span-method=\"cellSpanMethod\">\n    <template v-for=\"(header, i) in multipleHeaders\">\n      <x-table-column\n        v-if=\"header.children\"\n        :key=\"i\"\n        :label=\"header.label\">\n        <x-table-column\n          v-for=\"(sub, j) in header.children\"\n          :key=\"j\"\n          :label=\"sub.label\"\n          :prop=\"sub.prop\">\n        </x-table-column>\n      </x-table-column>\n      <x-table-column\n        v-else\n        :key=\"i\"\n        :label=\"header.label\"\n        :prop=\"header.prop\">\n      </x-table-column>\n    </template>\n  </x-table>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      rowCount: 5,\n      multipleHeaders: [\n        { label: '用户ID', prop: 'name' },\n        { label: '最近一次使用', prop: 'lastUsedTime' },\n        {\n          label: '地址',\n          children: [\n            { label: '省份', prop: 'province' },\n            { label: '城市', prop: 'city' },\n            { label: '详细地址', prop: 'address' }\n          ]\n        }\n      ]\n    }\n  },\n  computed: {\n    tableData () {\n      const list = []\n      for (let i = 0; i < this.rowCount; i++) {\n        list.push({\n          name: '易小宝',\n          city: '长沙',\n          lastUsedTime: '2018-09-01 12:30:33',\n          province: '湖南',\n          address: '岳麓区岳麓山下'\n        })\n      }\n      return list\n    }\n  },\n  methods: {\n    cellSpanMethod ({ row, column, rowIndex, columnIndex }) {\n      if (rowIndex % 2 === 0) {\n        if (columnIndex === 0) {\n          return [1, 2]\n        } else if (columnIndex === 1) {\n          return [0, 0]\n        }\n      }\n      if (columnIndex === 3) {\n        if (rowIndex === 1) {\n          return [2, 1]\n        } else if (rowIndex === 2) {\n          return [0, 0]\n        }\n      }\n      return [1, 1]\n    }\n  }\n}\n<\/script>",tableAffix:'<x-table border affix :data="longTableData">\n  <x-table-column\n    v-for="(header, index) in tableHeaders"\n    :key="index"\n    :label="header.label"\n    :prop="header.prop">\n  </x-table-column>\n</x-table>'}},computed:{tableData:function(){return this.getListData()},longTableData:function(){return this.tableData.concat(this.tableData.concat(this.tableData))},treeData:function(){var t=this.getListData();return t[2].children=this.getListData(),t[2].children[2].children=this.getListData(),t}},methods:{getListData:function(){for(var t=[],e=0;e<this.rowCount;e++)t.push({id:e+1,name:"易小宝",city:"长沙",lastUsedTime:"2018-09-01 12:30:33",province:"湖南",address:"岳麓区岳麓山下",age:"22",gender:"男",occupation:"工程师",cellphone:"18888888888",usedCount:Math.floor(10*Math.random())});return t},cellSpanMethod:function(t){t.row,t.column;var e=t.rowIndex,a=t.columnIndex;if(e%2==0){if(0===a)return[1,2];if(1===a)return[0,0]}if(3===a){if(1===e)return[2,1];if(2===e)return[0,0]}return[1,1]},sortMethod:function(t,e){return t-e},showCode:function(e,a){this.$drawer({direction:"right",className:"code-format",render:function(t){return t("prism-editor",{props:{readonly:!0,code:e,language:a}})}})}}}},136:function(t,e,a){"use strict";function n(){var a=this,t=a.$createElement,n=a._self._c||t;return n("div",{staticClass:"w-body"},[n("h3",{staticClass:"w-h3"},[a._v("Table 表格")]),a._v(" "),n("p",{staticClass:"w-p"},[a._v("用于展示多条结构类似的数据，可对数据进行排序等操作。")]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("基本用法")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(0)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableBasic,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("斑马纹表格")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{stripe:"",data:a.tableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(1)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableStripe,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("带竖边框表格")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{border:"",data:a.tableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(2)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableBorder,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("固定表头")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{border:"",height:"250",data:a.longTableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(3)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableHeight,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("固定列")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{stripe:"",data:a.tableData}},a._l(a.detailTableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{fixed:3===e?"right":1===e&&"left",width:180,label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(4)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableFixed,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("多级表头")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},[a._l(a.multipleHeaders,function(t,e){return[t.children?n("x-table-column",{key:e,attrs:{label:t.label}},a._l(t.children,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1):n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})]})],2)],1),a._v(" "),a._m(5)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableMultiple,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("多选")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},[n("x-table-column",{attrs:{type:"selection"}}),a._v(" "),a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})})],2)],1),a._v(" "),a._m(6)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableSelection,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("排序")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},a._l(a.sortableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{sortable:t.sortable,"sort-method":t.sortMethod,label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(7)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableSort,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("自定义列和表头")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop},scopedSlots:a._u([{key:"header",fn:function(t){return[n("div",{staticStyle:{height:"40px","line-height":"40px",background:"#ddd"}},[a._v(a._s(t.column.label)+"-"+a._s(t.$index))])]}},{key:"content",fn:function(t){return[n("div",{staticStyle:{"line-height":"30px","text-align":"center",background:"#eee"}},[a._v(a._s(t.content)+"-"+a._s(t.$rowIndex))])]}}],null,!0)})}),1)],1),a._v(" "),a._m(8)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableCustom,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("表头插槽")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{sortable:"",label:t.label,"header-align":2===e?"right":"left",align:2===e?"right":"left",prop:t.prop},scopedSlots:a._u([{key:"prepend",fn:function(t){return[n("div",{style:{margin:2===e?"0 0 0 10px":"0 10px 0 0"}},[a._v("前置"+a._s(t.$index))])]}},{key:"append",fn:function(t){return[n("div",[a._v("后置"+a._s(t.$index))])]}},{key:"headerText",fn:function(t){return[n("div",[a._v("文本插槽")]),a._v(" "),n("div",[a._v(a._s(t.column.label))])]}}],null,!0)})}),1)],1),a._v(" "),a._m(9)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableSlot,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("展开行")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData}},[n("x-table-column",{attrs:{type:"expand"},scopedSlots:a._u([{key:"expand",fn:function(t){return[n("div",{staticStyle:{height:"100px","line-height":"100px","text-align":"center",color:"#cdcdcd"}},[a._v("这里是第"+a._s(t.$index)+"行的展开行内容")])]}}])}),a._v(" "),a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})})],2)],1),a._v(" "),a._m(10)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableExpand,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("树结构")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.treeData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(11)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableTree,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("合并行或列")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{data:a.tableData,"cell-span-method":a.cellSpanMethod}},[a._l(a.multipleHeaders,function(t,e){return[t.children?n("x-table-column",{key:e,attrs:{label:t.label}},a._l(t.children,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1):n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})]})],2)],1),a._v(" "),a._m(12)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableSpan,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("窗口置顶")]),a._v(" "),n("div",{staticClass:"demo-wrapper"},[n("div",{staticClass:"demo-con clearfix"},[n("div",{staticClass:"table-demo"},[n("x-table",{attrs:{border:"",affix:"",data:a.longTableData}},a._l(a.tableHeaders,function(t,e){return n("x-table-column",{key:e,attrs:{label:t.label,prop:t.prop}})}),1)],1),a._v(" "),a._m(13)]),a._v(" "),n("div",{staticClass:"code-show"},[n("a",{attrs:{href:"javascript:;"},on:{click:function(t){return a.showCode(a.tableAffix,"html")}}},[a._v("显示代码 "),n("i",{staticClass:"ans-icon-arrow-right"})])])]),a._v(" "),n("h4",{staticClass:"w-h4"},[a._v("API")]),a._v(" "),n("p",{staticClass:"w-p"},[a._v("Table props")]),a._v(" "),a._m(14),a._v(" "),n("p",{staticClass:"w-p"},[a._v("Table events")]),a._v(" "),a._m(15),a._v(" "),n("p",{staticClass:"w-p"},[a._v("Table methods")]),a._v(" "),a._m(16),a._v(" "),n("p",{staticClass:"w-p"},[a._v("Table slots")]),a._v(" "),a._m(17),a._v(" "),n("p",{staticClass:"w-p"},[a._v("TableColumn props")]),a._v(" "),a._m(18),a._v(" "),n("p",{staticClass:"w-p"},[a._v("TableColumn scoped slots")]),a._v(" "),a._m(19)])}var l=[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("在 Table 组件上设置 height 属性后即可固定表头。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("在 TableColumn 组件上设置 fixed 属性控制固定列的位置，具体属性值参见配置。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("嵌套使用 TableColumn 即可生成多级表头。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("增加一列，并将 type 设置为 selection，即可实现多选功能。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("设置列属性 sortable 为 true 即可开启排序功能，sort-method 可以控制排序规则。如果需要后端排序，需要将 sortable 设置为 custom ，同时监听 on-sort-change 事件。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("通过作用域插槽 header 设置自定义表头，其中column 表示当前列信息，$index 表示列索引。通过作用域插槽 content 设置自定义列，其中 row 表示当前行数据，column 表示当前列信息，content 表示单元格内容，$rowIndex 表示行索引，$columnIndex 表示列索引。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("通过作用域插槽 prepend 和 append 可以在不改变原有表头功能的基础上进行扩展，align 用于设置列对齐方式，header-align 用于设置表头对齐方式，注意当 header-align 为 right 时，prepend 和 append 的位置是倒置的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("增加一列，并将 type 设置为 expand，同时使用作用域插槽 expand 设置展开行内容。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("树结构的叶子节点数据结构需要与父节点保持一致。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("通过 Table 组件的 cell-span-method 属性可以设置合并行或列的规则。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"demo-tips"},[e("p",[this._v("将 Table 组件的 affix 设置为 true，可以开启窗口置顶效果，也可以置顶表头距离 window 顶部的距离。")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("可选值")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("data")]),t._v(" "),a("td",[t._v("数据")]),t._v(" "),a("td",[t._v("Array")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("default-column-width")]),t._v(" "),a("td",[t._v("默认最小列宽")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("80")])]),t._v(" "),a("tr",[a("td",[t._v("fit")]),t._v(" "),a("td",[t._v("未设置 width 的列是否可以平分表格剩余宽度")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("stripe")]),t._v(" "),a("td",[t._v("是否斑马纹表格")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("border")]),t._v(" "),a("td",[t._v("是否带纵向边框表格")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("height")]),t._v(" "),a("td",[t._v("Table 的高度")]),t._v(" "),a("td",[t._v("String / Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("restrict")]),t._v(" "),a("td",[t._v("是否将 Table 限定在父容器内，当 Table 的高度超过父容器时，将出现垂直滚动条")]),t._v(" "),a("td",[t._v("Boolean / Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("affix")]),t._v(" "),a("td",[t._v("吸附在距离窗口顶部固定位置的效果，可直接传距离")]),t._v(" "),a("td",[t._v("Boolean / Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("empty-text")]),t._v(" "),a("td",[t._v("数据为空时显示的文本")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("暂无数据")])]),t._v(" "),a("tr",[a("td",[t._v("default-sort")]),t._v(" "),a("td",[t._v("默认排序列的 prop 和顺序")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("{ prop: String, order: 'asc' / 'desc' }")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("default-sort-orders")]),t._v(" "),a("td",[t._v("点击表头文字，排序规则轮转顺序，数组元素可选值：asc 表示升序，desc 表示降序，null 表示还原为原始顺序")]),t._v(" "),a("td",[t._v("Array")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("['asc', 'desc']")])]),t._v(" "),a("tr",[a("td",[t._v("default-expand-all")]),t._v(" "),a("td",[t._v("是否默认展开所有行")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("expand-row-keys")]),t._v(" "),a("td",[t._v("可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组")]),t._v(" "),a("td",[t._v("Array")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("cell-span-method")]),t._v(" "),a("td",[t._v("合并行或列的计算方法")]),t._v(" "),a("td",[t._v("Function({ row, column, rowIndex, columnIndex })")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("row-key")]),t._v(" "),a("td",[t._v("表格行的 key 值，当 reserve-states 为 true 时，必须设置该属性")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("current-row-key")]),t._v(" "),a("td",[t._v("用于指定当前行，可以通过设置 .highlight-row 的样式来控制高亮")]),t._v(" "),a("td",[t._v("String / Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("reserve-states")]),t._v(" "),a("td",[t._v("数据改变时是否保存多选、展开等状态，需要设置 row-key")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("children-prop")]),t._v(" "),a("td",[t._v("数据结构为树结构时，叶子节点数组的对应属性名称，注意树结构的数据只能使用自定义排序")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("children")])]),t._v(" "),a("tr",[a("td",[t._v("tree-title")]),t._v(" "),a("td",[t._v("树结构的第一列是否需要加上 title 属性")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("default-unfold-children")]),t._v(" "),a("td",[t._v("数据结构为树结构时，是否默认展开所有的叶子节点")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("row-limit")]),t._v(" "),a("td",[t._v("最大行数限制")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("100")])]),t._v(" "),a("tr",[a("td",[t._v("show-header")]),t._v(" "),a("td",[t._v("是否显示表头")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("virtual-scroll")]),t._v(" "),a("td",[t._v("是否启用虚拟滚动")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("row-height")]),t._v(" "),a("td",[t._v("行高，启动虚拟滚动时需要设置")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("38")])]),t._v(" "),a("tr",[a("td",[t._v("max-tree-row")]),t._v(" "),a("td",[t._v("当表格为树结构时，开启虚拟滚动后，最大渲染的行数")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("15")])]),t._v(" "),a("tr",[a("td",[t._v("reverse-scroll-y")]),t._v(" "),a("td",[t._v("是否反转 Y 轴滚轮，当该值为 true 时，滚动 Y 轴将控制水平方向的滚动")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("scroll-bar-class")]),t._v(" "),a("td",[t._v("自定义滚动条样式名称")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("frozen-data")]),t._v(" "),a("td",[t._v("是否冻结 data，节省内存开销")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("true")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("事件名称")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("回调参数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("on-select")]),t._v(" "),a("td",[t._v("当用户手动勾选数据行的 Checkbox 时触发的事件")]),t._v(" "),a("td",[t._v("selection, row")])]),t._v(" "),a("tr",[a("td",[t._v("on-select-all")]),t._v(" "),a("td",[t._v("当用户手动勾选全选 Checkbox 时触发的事件")]),t._v(" "),a("td",[t._v("selection")])]),t._v(" "),a("tr",[a("td",[t._v("on-selection-change")]),t._v(" "),a("td",[t._v("当选择项发生变化时会触发该事件")]),t._v(" "),a("td",[t._v("selection")])]),t._v(" "),a("tr",[a("td",[t._v("on-expand-change")]),t._v(" "),a("td",[t._v("当用户对某一行展开或者关闭的时候会触发该事件")]),t._v(" "),a("td",[t._v("row, expandedRows")])]),t._v(" "),a("tr",[a("td",[t._v("on-unfolded-change")]),t._v(" "),a("td",[t._v("当用户展开或者关闭树节点表格时会触发该事件")]),t._v(" "),a("td",[t._v("row, unfoldedRows")])]),t._v(" "),a("tr",[a("td",[t._v("on-sort-change")]),t._v(" "),a("td",[t._v("当表格的排序条件发生变化时触发的事件")]),t._v(" "),a("td",[t._v("column, prop, order")])]),t._v(" "),a("tr",[a("td",[t._v("on-hit")]),t._v(" "),a("td",[t._v("当表格内容滚动到边界时触发该事件，参数为边界位置信息（需要设置 height 或者 restrict 为 true）")]),t._v(" "),a("td",[t._v("'left' / 'right' / 'top' / 'bottom'")])]),t._v(" "),a("tr",[a("td",[t._v("on-scroll")]),t._v(" "),a("td",[t._v("当表格内容滚动时触发（需要设置 height 或者 restrict 为 true）")]),t._v(" "),a("td",[t._v("isVertical, amount")])]),t._v(" "),a("tr",[a("td",[t._v("on-slice")]),t._v(" "),a("td",[t._v("当虚拟滚动做数据切割时触发")]),t._v(" "),a("td",[t._v("—")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("参数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("doLayout")]),t._v(" "),a("td",[t._v("对 Table 进行重新布局")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("clearSelection")]),t._v(" "),a("td",[t._v("用于多选表格，清空用户的选择")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("toggleAllSelection")]),t._v(" "),a("td",[t._v("用于多选表格，切换所有行的选中状态")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("toggleRowSelection")]),t._v(" "),a("td",[t._v("用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中）")]),t._v(" "),a("td",[t._v("row, selected")])]),t._v(" "),a("tr",[a("td",[t._v("toggleRowExpansion")]),t._v(" "),a("td",[t._v("用于可展开表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开）")]),t._v(" "),a("td",[t._v("row, expanded")])]),t._v(" "),a("tr",[a("td",[t._v("toggleRowUnfolding")]),t._v(" "),a("td",[t._v("用于树结构表格，切换某一行的节点状态，如果使用了第二个参数，则是设置该节点的子节点是否显示（unfolded 为 true 则显示）")]),t._v(" "),a("td",[t._v("row, unfolded")])]),t._v(" "),a("tr",[a("td",[t._v("clearSort")]),t._v(" "),a("td",[t._v("用于清空排序条件，数据会恢复成未排序的状态")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("sort")]),t._v(" "),a("td",[t._v("手动对 Table 进行排序。参数 prop 属性指定排序列，order 指定排序顺序")]),t._v(" "),a("td",[t._v("prop: String, order: asc / desc")])]),t._v(" "),a("tr",[a("td",[t._v("setScrollPosition")]),t._v(" "),a("td",[t._v("设置滚动条的位置")]),t._v(" "),a("td",[t._v("left / right / top / bottom")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("empty")]),t._v(" "),a("td",[t._v("数据为空时显示的内容插槽")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("可选值")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("type")]),t._v(" "),a("td",[t._v("列的类型")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("selection / expand")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("label")]),t._v(" "),a("td",[t._v("表头内容")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("prop")]),t._v(" "),a("td",[t._v("表格内容对应的属性，支持多层访问：如 'user.address[0].city'")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("width")]),t._v(" "),a("td",[t._v("列宽，单位为 px(只支持数值型的格式，如 400)")]),t._v(" "),a("td",[t._v("Number / String")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("fixed")]),t._v(" "),a("td",[t._v("是否固定列，true 等价于 'left'")]),t._v(" "),a("td",[t._v("Boolean / String")]),t._v(" "),a("td",[t._v("true / 'left' / 'right'")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("sortable")]),t._v(" "),a("td",[t._v("对应列是否可以排序，如果设置为 'custom'，则代表用户希望自定义排序，需要监听 Table 的 on-sort-change 事件")]),t._v(" "),a("td",[t._v("Boolean / String")]),t._v(" "),a("td",[t._v("true / false / 'custom'")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("sort-method")]),t._v(" "),a("td",[t._v("对数据进行排序的时候使用的方法，仅当 sortable 设置为 true 的时候有效，需返回一个数字，和 Array.sort 表现一致")]),t._v(" "),a("td",[t._v("Function(cellA, cellB, rowA, rowB)")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("sort-orders")]),t._v(" "),a("td",[t._v("点击表头文字，排序规则轮转顺序，数组元素可选值：asc 表示升序，desc 表示降序，null 表示还原为原始顺序，当前列的该属性会覆盖 default-sort-orders 的值")]),t._v(" "),a("td",[t._v("Array")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("['asc', 'desc']")])]),t._v(" "),a("tr",[a("td",[t._v("resizable")]),t._v(" "),a("td",[t._v("是否可以通过拖拽右侧边框改变列宽")]),t._v(" "),a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("formatter")]),t._v(" "),a("td",[t._v("格式化内容的函数")]),t._v(" "),a("td",[t._v("Function(row, column, cellValue, rowIndex, columnIndex)")]),t._v(" "),a("td",[t._v("—")]),t._v(" "),a("td",[t._v("—")])]),t._v(" "),a("tr",[a("td",[t._v("align")]),t._v(" "),a("td",[t._v("单元格对齐方式")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("left / center / right")]),t._v(" "),a("td",[t._v("left")])]),t._v(" "),a("tr",[a("td",[t._v("header-align")]),t._v(" "),a("td",[t._v("表头对齐方式（当值为 right 时，prepend 插槽和 append 插槽的位置互换）")]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("left / center / right")]),t._v(" "),a("td",[t._v("left")])])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"api-table"},[a("table",{attrs:{cellspacing:"0"}},[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("header")]),t._v(" "),a("td",[t._v("自定义表头的内容，参数为 { column, $index }")])]),t._v(" "),a("tr",[a("td",[t._v("content")]),t._v(" "),a("td",[t._v("自定义列的内容，参数为 { row, column, content, $rowIndex, $columnIndex }")])]),t._v(" "),a("tr",[a("td",[t._v("expand")]),t._v(" "),a("td",[t._v("展开行的内容，参数为 { row, $index }")])]),t._v(" "),a("tr",[a("td",[t._v("prepend")]),t._v(" "),a("td",[t._v("表头前置插槽，可以在不破坏原有表头功能的基础上进行额外扩展，参数为 { column, $index }")])]),t._v(" "),a("tr",[a("td",[t._v("append")]),t._v(" "),a("td",[t._v("表头后置插槽，可以在不破坏原有表头功能的基础上进行额外扩展，参数为 { column, $index }")])]),t._v(" "),a("tr",[a("td",[t._v("headerText")]),t._v(" "),a("td",[t._v("表头文本插槽，可以在不破坏原有表头功能的基础上进行额外扩展，参数为 { column, $index }")])]),t._v(" "),a("tr",[a("td",[t._v("treeText")]),t._v(" "),a("td",[t._v("树结构第一列文本的插槽，参数为 { row, column, content, $rowIndex, $columnIndex }")])])])])])}];a.d(e,"a",function(){return n}),a.d(e,"b",function(){return l})},43:function(t,e,a){"use strict";a.r(e);var n=a(136),l=a(114);for(var r in l)"default"!==r&&function(t){a.d(e,t,function(){return l[t]})}(r);var s=a(4),d=Object(s.a)(l.default,n.a,n.b,!1,null,null,null);e.default=d.exports}}]);
//# sourceMappingURL=19.84590e2.js.map